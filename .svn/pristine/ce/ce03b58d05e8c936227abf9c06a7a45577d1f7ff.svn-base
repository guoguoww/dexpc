<template>
    <div class="">
        <div id="trade-view" :style="{height:height}">
        </div>
    </div>
</template>

<script type="">
import { widget as TvWidget } from "../../../static/tradeview/charting_library/charting_library.min.js";
import datafeeds from "./datafeeds/datafeeds";

console.log(TvWidget);

export default {
    name: "tradingView",
    props:{
        code:{//
            default:'',
            type:String           
        },
        height:{
            default:'600px',
            type:String
        },
        market:{
            type:Object
        }
    },
    data() {
        return {
            widget: null, //构造器对象
            datafeeds: new datafeeds(this),
            data:[],//数据存放
            interval:1,
            timer:null,//定时器
            chartType:null,//图表类型
            t:false,
            lastMarket:null,//上次价格
        };
    },
    components: {},
    created () {
      this.setTimer() 
    //   setInterval(()=>{
    //       this.getChartData() 
    //   },3000)
    },
    mounted() {
        this.init();
        
    },
    destroyed () {
       clearInterval(this.timer) 
       this.timer=null
    //    this.widget.remove()
    //    this.widget=null
    },
    watch: {
        code(v){
            // console.log(v,'tv');
            this.setTimer()
           this.widget.onChartReady ( ()=> {
                this.widget.chart().setSymbol(v)
            })
            this.lastMarket=null
            
        },
        interval(v){
            this.setTimer() 
        },
        market(v,o){
            console.log('tv',v);
            this.widget.onChartReady( ()=> {
                if(v.price!=o.price){
                    this.widget.chart().resetData()
                }
                
            })
            
        }

    },
    methods: {
        init() {
            if (!this.widet) {
                this.widget = new TvWidget({
                    datafeed: this.datafeeds,
                    fullscreen: false, //显示图表是否占用窗口中所有可用的空间。
                    library_path: `${process.env.LIBRARYPATH}static/tradeview/charting_library/`, //static文件夹的路径
                    locale: "zh",
                    autosize: true, // 显示图表是否应使用容器中的所有可用空间 并在调整容器本身大小时自动调整大小
                    symbol: "BTC/USD", //图表的初始商品
                    container_id: "trade-view", //widget的DOM元素id
                    timezone: "Asia/Shanghai", //交易时区
                    charts_storage_api_version: "1.1", //后台版本
                    debug: true,
                    interval: "1", //周期
                    toolbar_bg: "#000", //工具栏背景颜色
                    allow_symbol_change: true, //?
                    drawings_access: {
                        //???
                        type: "black",
                        tools: [
                            {
                                name: "Trend Line",
                                grayed: true
                            },
                            {
                                name: "Trend Angle",
                                grayed: true
                            }
                        ]
                    },
                    disabled_features: [
                        //禁用列表
                        "header_symbol_search",//搜索
                        // "header_resolutions",
                        "header_screenshot",//截图
                        // "header_chart_type",
                        "header_compare",//一个天平
                        // "header_undo_redo",
                        'date-range-list',
                        // "timeframes_toolbar",//底栏
                        // "hide_last_na_study_output",
                        // "legend_context_menu",
                        // "display_market_status" //右上角正在加载
                        'header_interval_dialog_button',//周期输入
                        'go_to_date',//底部跳转到某个日期
                    ],
                    enabled_features: [
                        //启用列表
                        "disable_resolution_rebuild",
                        "hide_left_toolbar_by_default"
                    ],
                    studies_overrides: {}, //自定义默认指标的样式及输入值
                    overrides: {
                        //对Widget对象的默认属性进行覆盖
                        "paneProperties.background": "#000",
                        "paneProperties.vertGridProperties.color": "#05134a",
                        "paneProperties.horzGridProperties.color": "#05134a",
                        "scalesProperties.lineColor": "#3d4a57",//边框颜色
                        "scalesProperties.textColor": "#fff",//y轴文字颜色
                        "scalesProperties.fontSize": 12,
                        "paneProperties.legendProperties.showLegend": !1,
                        "mainSeriesProperties.candleStyle.upColor": "#ec0000",
                        "mainSeriesProperties.candleStyle.downColor": "#00802b",
                        "mainSeriesProperties.candleStyle.borderUpColor":"#ec0000",
                        "mainSeriesProperties.candleStyle.borderDownColor":"#00802b",
                        "mainSeriesProperties.candleStyle.wickUpColor":"#ec0000",
                        "mainSeriesProperties.candleStyle.wickDownColor":"#0c8d2a",
                        "mainSeriesProperties.areaStyle.color1": "#606090",
                        "mainSeriesProperties.areaStyle.color2": "#3c78d8"
                    },
                    // overrides: {
					// 	"paneProperties.background": "#222222",
					// 	"paneProperties.vertGridProperties.color": "#454545",
					// 	"paneProperties.horzGridProperties.color": "#454545",
					// 	"symbolWatermarkProperties.transparency": 90,
					// 	"scalesProperties.textColor" : "#AAA"
					// },
                    custom_css_url: `./charts.css`
                });
                console.log(this.widget);
                this.widget.onChartReady(()=>{
                    // this.widget.chart().createStudy('MA Cross', false, false, [30, 120])
                    this.chartType=this.widget.chart().chartType()
                    this.createStudy()
                    this.widget.subscribe('chart_style', this.chartchange)//订阅

            })
                
            }
        },
        // 图表类型变化
        chartchange(){
            console.log(this.widget.chart().chartType());
            this.chartType=this.widget.chart().chartType()
            this.createStudy()
        },
        //创建指标线
        createStudy(){
            if (this.chartType==2||this.chartType==3||this.chartType==10) {
                this.widget.chart().removeAllStudies()
                return
            }
            this.widget.chart().createStudy('Moving Average', false, false, [5], null, {'Plot.color': '#642d92'});
            this.widget.chart().createStudy('Moving Average', false, false, [10], null, {'Plot.color': '#5278a3'});
            this.widget.chart().createStudy('Moving Average', false, false, [30], null, {'Plot.color': '#238031'});
            this.widget.chart().createStudy('Moving Average', false, false, [60], null, {'Plot.color': '#850058'});
        },
        // 获取数据
        getBars(symbolInfo, resolution, rangeStartDate, rangeEndDate, onLoadedCallback, onErrorCallback){
            // onLoadedCallback(arr)
            // var interval=this.interval
            // this.interval==60?interval='1h':this.interval
            // this.interval=='1D'?interval='1d':this.interval
            // this.$axios.post(`api/market/kline_data?code=${this.code}&interval=${interval}&beginTime=${String(new Date(rangeStartDate*1000)).replace('+','%2B')}&endTime=${String(new Date(rangeEndDate*1000)).replace('+','%2B')}`).then(res=>{
            //     var arr=[]
            //     console.log(res.data.data);
            //     // this.$emit('getPrice',res.data.data)
            //     if(!res.data.data){
            //         return
            //     }
            //     res.data.data.forEach(i => {
            //         arr.push( {
            //         time: +i.timestamp,
            //         close: +i.close,
            //         open: +i.open,
            //         high: +i.high,
            //         low: +i.low,
            //         // volume: 18500
            //     })
            //     })
            //     onLoadedCallback(arr)
            // })
        },
        // 订阅数据
        subscribeBars(symbolInfo, resolution, onRealtimeCallback, subscriberUID, onResetCacheNeededCallback){
            this.data.map((val)=>{
                // console.log(val);
            onRealtimeCallback(val)
            })
            console.log();
            if (!this.t) {
                this.update(onRealtimeCallback)
            }
            console.log(resolution);
            this.interval=resolution
            onResetCacheNeededCallback()
            // console.log(this.widget.chart().chartType());
        },
        //设置定时器
        setTimer(){
            if (this.timer) {
                clearInterval(this.timer)
                this.timer=null    
            }
            this.getChartData()
           this.timer=setInterval(()=>{
                this.getChartData()
           },1000*60) 
        },
        // 获取图表数据
        getChartData(){
            var interval=this.interval
            this.interval==60?interval='1h':this.interval
            this.interval=='1D'?interval='1d':this.interval
            if (!this.code) {
                return
            }
            this.t=true
            this.$axios.post(`api/market/kline_data?code=${this.code}&interval=${interval}`).then(res=>{
                // console.log(this.data);
                this.t=false
                var arr=[]
                console.log(res.data.data);
                this.$emit('getPrice',res.data.data)
                if(!res.data.data){
                    return
                }
                res.data.data.forEach(i => {
                    arr.push( {
                    time: +i.timestamp,
                    close: +i.close,
                    open: +i.open,
                    high: +i.high,
                    low: +i.low,
                    // volume: 18500
                })
                });
                this.data=arr
                // console.log(new Date(rangeStartDate * 1000),new Date(rangeEndDate * 1000));
                this.widget.onChartReady( ()=> {
                    this.widget.chart().resetData()
                })
                console.log(arr.length);
            })
        },
        //更新数据
        update(onRealtimeCallback){
            if (!this.data.length) {
                return
            }
            var interval=this.interval
            this.interval=='1D'?interval=24*60:interval
            console.log(this.data[this.data.length-1].time+interval*60*1000);
            if (!this.lastMarket) {
                this.lastMarket={
                    time:+this.data[this.data.length-1].time+interval*60*1000,
                    close: +this.market.price,
                    open: +this.data[this.data.length-1].close,
                    high:+this.market.price,
                    low: +this.market.price,
                }
            }else{
                Object.assign(this.lastMarket,{
                    high:Math.max(this.lastMarket.high,this.market.price,+this.data[this.data.length-1].close),
                    low:Math.min(this.lastMarket.low,this.market.price,+this.data[this.data.length-1].close),
                    open:+this.data[this.data.length-1].close,
                    close:+this.market.price,
                    time:+this.data[this.data.length-1].time+interval*60*1000
                })
            }
            
            onRealtimeCallback(this.lastMarket)
        },
    }
};
</script>

<style scoped lang="">
</style>
